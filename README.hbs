[![Build Status](https://travis-ci.org/mickelindahl/hapi_orchestra_view.svg?branch=master)](https://travis-ci.org/mickelindahl/hapi_orchestra_view)
[![Coverage Status](https://coveralls.io/repos/github/mickelindahl/hapi_orchestra_view/badge.svg?branch=master)](https://coveralls.io/github/mickelindahl/hapi_orchestra_view?branch=master)

# Hapi orchestra view

Library for composing [handlebar](http://handlebarsjs.com/) html templates into a single page.
With a director file you define the skeleton of a page and then it is
composed from templates. First each template is compiled and then the
director with the compiled templates as input. The function
`h.viewOrchestra(options)` is used to returned the final html where
`options.params` object holds the parameters available to all templates.
Please se example below for more options.


## Installation

Copy files in `lib/views` to preferred folder in project

Open the `director.html` and edit it accordingly to your preference. Each
triple handlebar import corresponds to the compiled output (except for
`raw.html`) of files in `lib/view/templates`.

Run `npm install --save git+https://x-oauth-basic@github.com/mickelindahl/hapi_orchestra_view.git`


## Usage
```javaScript
'use strict'

const Hapi = require( 'hapi' );

const server = new Hapi.Server( { port: 3000 } );

server.register( {
   register: require( 'hapi-page-view' ),
   options:  {
      templates: [
         { id: 'my_head', param: 'head', path: 'orchestra/templates/head.html', compile:true },
         { id: 'my_body', param: 'body', path: 'main.html', compile:true },
         { id: 'my_raw', param: 'raw', path: 'orchestra/templates/raw.html', compile:false },
        ],
   directors: [{ id: 'my_director', path: 'orchestra/director.html' }],
   views: './lib/views',
   actions:[{
        template_id:'my_head',
        callbacks:[async (params)=>{params.page_title='Super site'}]
        }]

        }
    }).then(()=>{

    server.route([
        {
            method: 'GET',
            path: '/'
            handler: async (request, h)=>{
                return h.viewOrchestra({
                            director:'my_director',
                            include: ['my_head', 'my_body','my_body_2',  'my_raw', 'my_wrong'],
                            params: {title:'A title'},
                            callbacks:[async (params)=>{params.name='Humphrey Bogard'}]
                    }),
                }
            }
        ])
});
```

## Methods

The `handler` is attached to hapijs `server.methods`

{{>all-docs~}}

## Test
`npm run-script test`

## Contributing
In lieu of a formal styleguide, take care to maintain the
existing coding style. Add unit tests for any new or changed
functionality. Lint and test your code.